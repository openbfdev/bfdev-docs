import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.4298ed76.js";const h=JSON.parse('{"title":"Array","description":"","frontmatter":{},"headers":[],"relativePath":"manual/en_US/array.md","filePath":"manual/en_US/array.md"}'),o={name:"manual/en_US/array.md"},p=l(`<h1 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">â€‹</a></h1><p>The bfdev array struct is defined as follows:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> bfdev_array {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> bfdev_alloc </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">alloc;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> capacity;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> cells;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">data;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> bfdev_array {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> bfdev_alloc </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">alloc;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> capacity;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> cells;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">data;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>The elements of the array are available in the <code>data</code> field. The <code>index</code> field holds the number of elements. The <code>cells</code> field holds the size of a single element and is set when the array is initialized.</p><p>Use the <code>BFDEV_DEFINE_ARRAY(name, alloc, cells)</code> macro to define an array in a pool, and the <code>bfdev_array_init(array, alloc, cells)</code> call to initialize an array object that has already been allocated.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* define an int array named foo using null allocator */</span></span>
<span class="line"><span style="color:#B392F0;">BFDEV_DEFINE_ARRAY</span><span style="color:#E1E4E8;">(foo, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* initialize int array using null allocator */</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> bfdev_array bar;</span></span>
<span class="line"><span style="color:#B392F0;">bfdev_array_init</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">bar</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* define an int array named foo using null allocator */</span></span>
<span class="line"><span style="color:#6F42C1;">BFDEV_DEFINE_ARRAY</span><span style="color:#24292E;">(foo, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* initialize int array using null allocator */</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> bfdev_array bar;</span></span>
<span class="line"><span style="color:#6F42C1;">bfdev_array_init</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">bar</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">));</span></span></code></pre></div><p>Use the following functions to additions and deletions elements to an array:</p><ul><li>bfdev_array_push(array, num) pushes n tail elements and returns pointer to the first one</li><li>bfdev_array_pop(array, num) pops n tail elements and returns pointer to the first one</li></ul><p>If the currently allocated amount of memory is not large enough to accommodate the new elements, a new block of memory is allocated and the existing elements are copied to it. The new memory block is normally twice as large as the existing one.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">foo, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">bar;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">foo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bfdev_array_push</span><span style="color:#E1E4E8;">(array, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">bar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bfdev_array_pop</span><span style="color:#E1E4E8;">(array, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">foo, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">bar;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bfdev_array_push</span><span style="color:#24292E;">(array, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">bar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bfdev_array_pop</span><span style="color:#24292E;">(array, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span></code></pre></div>`,10),e=[p];function t(r,c,y,i,E,d){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{h as __pageData,u as default};
