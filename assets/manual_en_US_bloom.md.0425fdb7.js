import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.7f588f2d.js";const h=JSON.parse('{"title":"Bloom Filter","description":"","frontmatter":{},"headers":[],"relativePath":"manual/en_US/bloom.md","filePath":"manual/en_US/bloom.md"}'),o={name:"manual/en_US/bloom.md"},p=l(`<h1 id="bloom-filter" tabindex="-1">Bloom Filter <a class="header-anchor" href="#bloom-filter" aria-label="Permalink to &quot;Bloom Filter&quot;">â€‹</a></h1><p>A bloom filter is a probabilistic data structure that is based on hashing. It is extremely space efficient and is used to add elements to a set and test if an element is in a set, the struct is defined as follows:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> bfdev_bloom {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> bfdev_alloc </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">alloc;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">bfdev_bloom_hash_t</span><span style="color:#E1E4E8;"> hash;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> funcs;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">pdata;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> capacity;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> bitmap</span><span style="color:#F97583;">[]</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> bfdev_bloom {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> bfdev_alloc </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">alloc;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">bfdev_bloom_hash_t</span><span style="color:#24292E;"> hash;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> funcs;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">pdata;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> capacity;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> bitmap</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>The collision box of the bloom are available in the <code>bitmap</code> field. The <code>capacity</code> field holds the number of bits in bitmap. The <code>hash</code> field holds the callback of the hash functions.</p><p>Use the <code>bfdev_bloom_create(alloc, capacity, hash, funcs, pdata)</code> call to create a bloom-filter in a pool, and the <code>bfdev_bloom_destory(bloom)</code> call to destory an bloom-filter object that has already been create.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> bfdev_bloom </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">bloom;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* create a bloom-filter named foo using hash function */</span></span>
<span class="line"><span style="color:#E1E4E8;">bloom </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bfdev_bloom_create</span><span style="color:#E1E4E8;">(foo, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, hash, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* destory a bloom-filter */</span></span>
<span class="line"><span style="color:#B392F0;">bfdev_bloom_destory</span><span style="color:#E1E4E8;">(bloom);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> bfdev_bloom </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">bloom;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* create a bloom-filter named foo using hash function */</span></span>
<span class="line"><span style="color:#24292E;">bloom </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bfdev_bloom_create</span><span style="color:#24292E;">(foo, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, hash, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* destory a bloom-filter */</span></span>
<span class="line"><span style="color:#6F42C1;">bfdev_bloom_destory</span><span style="color:#24292E;">(bloom);</span></span></code></pre></div><p>Use the following functions to get data from and additions data to the bloom filter:</p><ul><li>bfdev_bloom_peek(bloom, key) test the key in the bloom-filter</li><li>bfdev_bloom_push(bloom, key) addition the ksy to the bloom-filter</li></ul><p>When testing if an element is in the bloom filter, false positives are possible. It will either say that an element is definitely not in the set or that it is possible the element is in the set.</p><p>A bloom filter is very much like a hash table in that it will use a hash function to map a key to a bucket. However, it will not store that key in that bucket, it will simply mark it as filled. So, many keys might map to same filled bucket, creating false positives.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">foo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> possible;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">bfdev_bloom_push</span><span style="color:#E1E4E8;">(bloom, foo);</span></span>
<span class="line"><span style="color:#E1E4E8;">possible </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bfdev_bloom_peek</span><span style="color:#E1E4E8;">(array, foo);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> possible;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">bfdev_bloom_push</span><span style="color:#24292E;">(bloom, foo);</span></span>
<span class="line"><span style="color:#24292E;">possible </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bfdev_bloom_peek</span><span style="color:#24292E;">(array, foo);</span></span></code></pre></div>`,11),e=[p];function t(c,r,i,y,E,d){return a(),n("div",null,e)}const m=s(o,[["render",t]]);export{h as __pageData,m as default};
