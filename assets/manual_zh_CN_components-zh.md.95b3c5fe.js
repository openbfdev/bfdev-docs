import{_ as e,o as r,c as t,Q as l}from"./chunks/framework.4298ed76.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"manual/zh_CN/components-zh.md","filePath":"manual/zh_CN/components-zh.md"}'),o={name:"manual/zh_CN/components-zh.md"},a=l('<p>以下是 <code>Supporting Components</code> 各模块的详细说明及参数位置，可用于文档目录结构中：</p><hr><h3 id="data-container" tabindex="-1"><strong>Data Container</strong> <a class="header-anchor" href="#data-container" aria-label="Permalink to &quot;**Data Container**&quot;">​</a></h3><h4 id="array" tabindex="-1"><code>array</code> <a class="header-anchor" href="#array" aria-label="Permalink to &quot;`array`&quot;">​</a></h4><ul><li><strong>描述</strong>：动态数组，支持栈操作（如 push/pop）。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/array.h#L57-L62" target="_blank" rel="noreferrer">bfdev_array_init()</a>：初始化数组。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/array.h#L173-L174" target="_blank" rel="noreferrer">bfdev_array_push()</a>：向数组末尾添加元素。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/array.h#L176-L177" target="_blank" rel="noreferrer">bfdev_array_pop()</a>：从数组末尾移除元素。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/array.h#L238-L240" target="_blank" rel="noreferrer">bfdev_array_splice()</a>：在指定索引处插入/删除元素。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/array.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/array.c" target="_blank" rel="noreferrer">src/array.c</a></li></ul><h4 id="bloom" tabindex="-1"><code>bloom</code> <a class="header-anchor" href="#bloom" aria-label="Permalink to &quot;`bloom`&quot;">​</a></h4><ul><li><strong>描述</strong>：布隆过滤器，用于快速判断一个元素是否可能存在于集合中。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_bloom_init()</code>：初始化布隆过滤器。</li><li><code>bfdev_bloom_add()</code>：将元素加入过滤器。</li><li><code>bfdev_bloom_check()</code>：检查元素是否存在。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/bloom.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/bloom.c" target="_blank" rel="noreferrer">src/bloom.c</a></li></ul><h4 id="btree" tabindex="-1"><code>btree</code> <a class="header-anchor" href="#btree" aria-label="Permalink to &quot;`btree`&quot;">​</a></h4><ul><li><strong>描述</strong>：B+ 树实现，适用于大规模数据存储和查找。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/btree.h#L60-L65" target="_blank" rel="noreferrer">bfdev_btree_init()</a>：初始化 B+ 树。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/btree.h#L77-L78" target="_blank" rel="noreferrer">bfdev_btree_insert()</a>：插入键值对。</li><li><code>bfdev_btree_search()</code>：根据键查找值。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/btree.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/btree.c" target="_blank" rel="noreferrer">src/btree.c</a></li></ul><h4 id="circle" tabindex="-1"><code>circle</code> <a class="header-anchor" href="#circle" aria-label="Permalink to &quot;`circle`&quot;">​</a></h4><ul><li><strong>描述</strong>：循环队列，适用于固定大小的先进先出场景。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_circle_init()</code>：初始化循环队列。</li><li><code>bfdev_circle_enqueue()</code>：入队操作。</li><li><code>bfdev_circle_dequeue()</code>：出队操作。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/circle.h&gt;</code></li><li><strong>源文件</strong>：<code>src/circle.c</code></li></ul><h4 id="fifo" tabindex="-1"><code>fifo</code> <a class="header-anchor" href="#fifo" aria-label="Permalink to &quot;`fifo`&quot;">​</a></h4><ul><li><strong>描述</strong>：无锁 FIFO 队列，适合单读单写线程安全场景。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_fifo_init()</code>：初始化 FIFO 队列。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/fifo.h#L361-L384" target="_blank" rel="noreferrer">bfdev_fifo_put()</a>：入队操作。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/fifo.h#L332-L355" target="_blank" rel="noreferrer">bfdev_fifo_get()</a>：出队操作。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/fifo.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/fifo.c" target="_blank" rel="noreferrer">src/fifo.c</a></li></ul><h4 id="hashmap" tabindex="-1"><code>hashmap</code> <a class="header-anchor" href="#hashmap" aria-label="Permalink to &quot;`hashmap`&quot;">​</a></h4><ul><li><strong>描述</strong>：哈希表实现，支持动态扩容与重新哈希。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/hashmap.h#L75-L80" target="_blank" rel="noreferrer">bfdev_hashmap_init()</a>：初始化哈希表。</li><li><code>bfdev_hashmap_put()</code>：插入键值对。</li><li><code>bfdev_hashmap_get()</code>：获取键对应的值。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/hashmap.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/hashmap.c" target="_blank" rel="noreferrer">src/hashmap.c</a></li></ul><h4 id="hashtbl" tabindex="-1"><code>hashtbl</code> <a class="header-anchor" href="#hashtbl" aria-label="Permalink to &quot;`hashtbl`&quot;">​</a></h4><ul><li><strong>描述</strong>：哈希表工具函数集合，提供通用哈希计算。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/hashtbl.h#L45-L52" target="_blank" rel="noreferrer">bfdev_hashtbl_init()</a>：初始化哈希表。</li><li><code>bfdev_hashtbl_hash()</code>：计算哈希值。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/hashtbl.h&gt;</code></li><li><strong>源文件</strong>：<code>src/hashtbl.c</code></li></ul><h4 id="heap" tabindex="-1"><code>heap</code> <a class="header-anchor" href="#heap" aria-label="Permalink to &quot;`heap`&quot;">​</a></h4><ul><li><strong>描述</strong>：二叉堆，支持最大堆或最小堆。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/heap.h#L78-L82" target="_blank" rel="noreferrer">bfdev_heap_init()</a>：初始化堆。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/heap.h#L181-L189" target="_blank" rel="noreferrer">bfdev_heap_insert()</a>：插入元素。</li><li><code>bfdev_heap_extract()</code>：提取堆顶元素。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/heap.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/heap.c" target="_blank" rel="noreferrer">src/heap.c</a></li></ul><h4 id="hlist" tabindex="-1"><code>hlist</code> <a class="header-anchor" href="#hlist" aria-label="Permalink to &quot;`hlist`&quot;">​</a></h4><ul><li><strong>描述</strong>：哈希链表，基于哈希桶组织的链表结构。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_hlist_add()</code>：向链表中添加节点。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/hlist.h#L155-L166" target="_blank" rel="noreferrer">bfdev_hlist_del()</a>：从链表中删除节点。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/hlist.h&gt;</code></li><li><strong>源文件</strong>：<code>src/hlist.c</code></li></ul><h4 id="ilist" tabindex="-1"><code>ilist</code> <a class="header-anchor" href="#ilist" aria-label="Permalink to &quot;`ilist`&quot;">​</a></h4><ul><li><strong>描述</strong>：索引链表，通过索引访问链表节点。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/ilist.h#L51-L53" target="_blank" rel="noreferrer">bfdev_ilist_add()</a>：添加节点。</li><li><code>bfdev_ilist_get()</code>：通过索引获取节点。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/ilist.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/ilist.c" target="_blank" rel="noreferrer">src/ilist.c</a></li></ul><h4 id="list" tabindex="-1"><code>list</code> <a class="header-anchor" href="#list" aria-label="Permalink to &quot;`list`&quot;">​</a></h4><ul><li><strong>描述</strong>：双向链表，常用基础链表结构。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/list.h#L81-L85" target="_blank" rel="noreferrer">bfdev_list_add()</a>：添加节点。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/list.h#L113-L124" target="_blank" rel="noreferrer">bfdev_list_del()</a>：删除节点。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/list.h&gt;</code></li><li><strong>源文件</strong>：<code>src/list.c</code></li></ul><h4 id="llist" tabindex="-1"><code>llist</code> <a class="header-anchor" href="#llist" aria-label="Permalink to &quot;`llist`&quot;">​</a></h4><ul><li><strong>描述</strong>：无锁链表，适用于并发环境。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/llist.h#L41-L45" target="_blank" rel="noreferrer">bfdev_llist_add()</a>：添加节点。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/llist.h#L31-L32" target="_blank" rel="noreferrer">bfdev_llist_del()</a>：删除节点。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/llist.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/llist.c" target="_blank" rel="noreferrer">src/llist.c</a></li></ul><h4 id="radix" tabindex="-1"><code>radix</code> <a class="header-anchor" href="#radix" aria-label="Permalink to &quot;`radix`&quot;">​</a></h4><ul><li><strong>描述</strong>：基数树，适用于高效 IP 地址查找等场景。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_radix_insert()</code>：插入键。</li><li><code>bfdev_radix_lookup()</code>：查找键。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/radix.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/radix.c" target="_blank" rel="noreferrer">src/radix.c</a></li></ul><h4 id="rbtree" tabindex="-1"><code>rbtree</code> <a class="header-anchor" href="#rbtree" aria-label="Permalink to &quot;`rbtree`&quot;">​</a></h4><ul><li><strong>描述</strong>：红黑树，自平衡二叉搜索树。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_rbtree_insert()</code>：插入节点。</li><li><code>bfdev_rbtree_delete()</code>：删除节点。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/rbtree.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/rbtree.c" target="_blank" rel="noreferrer">src/rbtree.c</a></li></ul><h4 id="ringbuf" tabindex="-1"><code>ringbuf</code> <a class="header-anchor" href="#ringbuf" aria-label="Permalink to &quot;`ringbuf`&quot;">​</a></h4><ul><li><strong>描述</strong>：环形缓冲区，适用于流式数据处理。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_ringbuf_init()</code>：初始化环形缓冲区。</li><li><code>bfdev_ringbuf_write()</code>：写入数据。</li><li><code>bfdev_ringbuf_read()</code>：读取数据。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/ringbuf.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/ringbuf.c" target="_blank" rel="noreferrer">src/ringbuf.c</a></li></ul><h4 id="segtree" tabindex="-1"><code>segtree</code> <a class="header-anchor" href="#segtree" aria-label="Permalink to &quot;`segtree`&quot;">​</a></h4><ul><li><strong>描述</strong>：线段树，适用于区间查询与更新。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_segtree_init()</code>：初始化线段树。</li><li><code>bfdev_segtree_query()</code>：区间查询。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/segtree.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/segtree.c" target="_blank" rel="noreferrer">src/segtree.c</a></li></ul><h4 id="skiplist" tabindex="-1"><code>skiplist</code> <a class="header-anchor" href="#skiplist" aria-label="Permalink to &quot;`skiplist`&quot;">​</a></h4><ul><li><strong>描述</strong>：跳表，支持高效的查找、插入和删除。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/skiplist.h#L47-L49" target="_blank" rel="noreferrer">bfdev_skiplist_insert()</a>：插入节点。</li><li><code>bfdev_skiplist_search()</code>：查找节点。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/skiplist.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/skiplist.c" target="_blank" rel="noreferrer">src/skiplist.c</a></li></ul><h4 id="slist" tabindex="-1"><code>slist</code> <a class="header-anchor" href="#slist" aria-label="Permalink to &quot;`slist`&quot;">​</a></h4><ul><li><strong>描述</strong>：单向链表，内存占用小，适用于轻量级场景。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/slist.h#L55-L65" target="_blank" rel="noreferrer">bfdev_slist_add()</a>：添加节点。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/slist.h#L72-L88" target="_blank" rel="noreferrer">bfdev_slist_del()</a>：删除节点。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/slist.h&gt;</code></li><li><strong>源文件</strong>：<code>src/slist.c</code></li></ul><hr><h3 id="bit-operation" tabindex="-1"><strong>Bit Operation</strong> <a class="header-anchor" href="#bit-operation" aria-label="Permalink to &quot;**Bit Operation**&quot;">​</a></h3><h4 id="bitrev" tabindex="-1"><code>bitrev</code> <a class="header-anchor" href="#bitrev" aria-label="Permalink to &quot;`bitrev`&quot;">​</a></h4><ul><li><strong>描述</strong>：位反转操作，适用于字节或整型数据。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/bitrev.h#L179-L185" target="_blank" rel="noreferrer">bfdev_bitrev8()</a>：8 位位反转。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/bitrev.h#L186-L192" target="_blank" rel="noreferrer">bfdev_bitrev16()</a>：16 位位反转。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/bitrev.h#L193-L199" target="_blank" rel="noreferrer">bfdev_bitrev32()</a>：32 位位反转。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/bitrev.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/bitrev.c" target="_blank" rel="noreferrer">src/bitrev.c</a></li></ul><h4 id="bitwalk" tabindex="-1"><code>bitwalk</code> <a class="header-anchor" href="#bitwalk" aria-label="Permalink to &quot;`bitwalk`&quot;">​</a></h4><ul><li><strong>描述</strong>：位图迭代器，用于遍历设置位（1）的位置。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_bitwalk_first()</code>：获取第一个置位索引。</li><li><code>bfdev_bitwalk_next()</code>：获取下一个置位索引。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/bitwalk.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/bitwalk.c" target="_blank" rel="noreferrer">src/bitwalk.c</a></li></ul><h4 id="popcount" tabindex="-1"><code>popcount</code> <a class="header-anchor" href="#popcount" aria-label="Permalink to &quot;`popcount`&quot;">​</a></h4><ul><li><strong>描述</strong>：统计给定数值中 1 的位数。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/popcount.h#L174-L180" target="_blank" rel="noreferrer">bfdev_popcount8()</a>：统计 8 位值中的 1 的个数。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/popcount.h#L188-L194" target="_blank" rel="noreferrer">bfdev_popcount32()</a>：统计 32 位值中的 1 的个数。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/popcount.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/popcount.c" target="_blank" rel="noreferrer">src/popcount.c</a></li></ul><hr><h3 id="architecture" tabindex="-1"><strong>Architecture</strong> <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;**Architecture**&quot;">​</a></h3><h4 id="atomic" tabindex="-1"><code>atomic</code> <a class="header-anchor" href="#atomic" aria-label="Permalink to &quot;`atomic`&quot;">​</a></h4><ul><li><strong>描述</strong>：原子操作接口，保证多线程安全。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_atomic_inc()</code>：原子递增。</li><li><code>bfdev_atomic_dec()</code>：原子递减。</li><li><code>bfdev_atomic_xchg()</code>：原子交换。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/atomic.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/atomic.c" target="_blank" rel="noreferrer">src/atomic.c</a></li></ul><h4 id="byteorder" tabindex="-1"><code>byteorder</code> <a class="header-anchor" href="#byteorder" aria-label="Permalink to &quot;`byteorder`&quot;">​</a></h4><ul><li><strong>描述</strong>：字节序转换工具，支持大小端互换。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/byteorder/big-endian.h#L47-L48" target="_blank" rel="noreferrer">bfdev_cpu_to_be16()</a>：CPU 字节序转大端 16 位。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/byteorder/big-endian.h#L44-L45" target="_blank" rel="noreferrer">bfdev_be16_to_cpu()</a>：大端 16 位转 CPU 字节序。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/byteorder.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/byteorder.c" target="_blank" rel="noreferrer">src/byteorder.c</a></li></ul><h4 id="cmpxchg" tabindex="-1"><code>cmpxchg</code> <a class="header-anchor" href="#cmpxchg" aria-label="Permalink to &quot;`cmpxchg`&quot;">​</a></h4><ul><li><strong>描述</strong>：比较并交换（CAS），用于无锁编程。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_cmpxchg()</code>：比较并交换指定内存地址的内容。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/cmpxchg.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/cmpxchg.c" target="_blank" rel="noreferrer">src/cmpxchg.c</a></li></ul><h4 id="swab" tabindex="-1"><code>swab</code> <a class="header-anchor" href="#swab" aria-label="Permalink to &quot;`swab`&quot;">​</a></h4><ul><li><strong>描述</strong>：字节交换，用于双字节或四字节数据交换。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/swab.h#L160-L165" target="_blank" rel="noreferrer">bfdev_swab16()</a>：16 位字节交换。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/swab.h#L174-L179" target="_blank" rel="noreferrer">bfdev_swab32()</a>：32 位字节交换。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/swab.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/swab.c" target="_blank" rel="noreferrer">src/swab.c</a></li></ul><hr><h3 id="memory-allocator" tabindex="-1"><strong>Memory Allocator</strong> <a class="header-anchor" href="#memory-allocator" aria-label="Permalink to &quot;**Memory Allocator**&quot;">​</a></h3><h4 id="allocator" tabindex="-1"><code>allocator</code> <a class="header-anchor" href="#allocator" aria-label="Permalink to &quot;`allocator`&quot;">​</a></h4><ul><li><strong>描述</strong>：通用内存分配兼容层，封装多种分配器接口。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/allocator.h#L79-L80" target="_blank" rel="noreferrer">bfdev_malloc()</a>：内存分配。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/allocator.h#L89-L90" target="_blank" rel="noreferrer">bfdev_free()</a>：释放内存。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/allocator.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/allocator.c" target="_blank" rel="noreferrer">src/allocator.c</a></li></ul><h4 id="allocpool" tabindex="-1"><code>allocpool</code> <a class="header-anchor" href="#allocpool" aria-label="Permalink to &quot;`allocpool`&quot;">​</a></h4><ul><li><strong>描述</strong>：高性能内存池，优化频繁小块内存申请。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_allocpool_create()</code>：创建内存池。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/allocpool.h#L62-L64" target="_blank" rel="noreferrer">bfdev_allocpool_alloc()</a>：从池中分配内存。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/allocpool.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/allocpool.c" target="_blank" rel="noreferrer">src/allocpool.c</a></li></ul><h4 id="memalloc" tabindex="-1"><code>memalloc</code> <a class="header-anchor" href="#memalloc" aria-label="Permalink to &quot;`memalloc`&quot;">​</a></h4><ul><li><strong>描述</strong>：内存分配算法实现，如 slab、buddy 等。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/memalloc.h#L94-L96" target="_blank" rel="noreferrer">bfdev_memalloc_init()</a>：初始化内存分配器。</li><li><code>bfdev_memalloc_alloc()</code>：动态内存分配。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/memalloc.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/memalloc.c" target="_blank" rel="noreferrer">src/memalloc.c</a></li></ul><hr><h3 id="string-process" tabindex="-1"><strong>String Process</strong> <a class="header-anchor" href="#string-process" aria-label="Permalink to &quot;**String Process**&quot;">​</a></h3><h4 id="argv" tabindex="-1"><code>argv</code> <a class="header-anchor" href="#argv" aria-label="Permalink to &quot;`argv`&quot;">​</a></h4><ul><li><strong>描述</strong>：命令行参数分割工具。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_argv_split()</code>：按空格分隔字符串为参数数组。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/argv.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/argv.c" target="_blank" rel="noreferrer">src/argv.c</a></li></ul><h4 id="fsm" tabindex="-1"><code>fsm</code> <a class="header-anchor" href="#fsm" aria-label="Permalink to &quot;`fsm`&quot;">​</a></h4><ul><li><strong>描述</strong>：有限状态机框架，用于解析复杂输入流。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/fsm.h#L206-L207" target="_blank" rel="noreferrer">bfdev_fsm_handle()</a>：处理状态迁移事件。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/fsm.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/fsm.c" target="_blank" rel="noreferrer">src/fsm.c</a></li></ul><h4 id="scnprintf" tabindex="-1"><code>scnprintf</code> <a class="header-anchor" href="#scnprintf" aria-label="Permalink to &quot;`scnprintf`&quot;">​</a></h4><ul><li><strong>描述</strong>：安全格式化输出，防止缓冲区溢出。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_scnprintf()</code>：格式化写入指定长度缓冲区。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/scnprintf.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/scnprintf.c" target="_blank" rel="noreferrer">src/scnprintf.c</a></li></ul><hr><h3 id="mathematics" tabindex="-1"><strong>Mathematics</strong> <a class="header-anchor" href="#mathematics" aria-label="Permalink to &quot;**Mathematics**&quot;">​</a></h3><h4 id="mpi" tabindex="-1"><code>mpi</code> <a class="header-anchor" href="#mpi" aria-label="Permalink to &quot;`mpi`&quot;">​</a></h4><ul><li><strong>描述</strong>：大整数运算库，支持加减乘除等操作。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/mpi.h#L64-L66" target="_blank" rel="noreferrer">bfdev_mpi_add()</a>：大整数加法。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/mpi.h#L72-L74" target="_blank" rel="noreferrer">bfdev_mpi_mul()</a>：大整数乘法。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/mpi.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/mpi.c" target="_blank" rel="noreferrer">src/mpi.c</a></li></ul><h4 id="log2" tabindex="-1"><code>log2</code> <a class="header-anchor" href="#log2" aria-label="Permalink to &quot;`log2`&quot;">​</a></h4><ul><li><strong>描述</strong>：计算 log₂ 值，支持动态和常量优化。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/log2.h#L151-L159" target="_blank" rel="noreferrer">bfdev_ilog2()</a>：计算 32 位整数的 log₂。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/log2.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/log2.c" target="_blank" rel="noreferrer">src/log2.c</a></li></ul><hr><h3 id="rate-limiting" tabindex="-1"><strong>Rate limiting</strong> <a class="header-anchor" href="#rate-limiting" aria-label="Permalink to &quot;**Rate limiting**&quot;">​</a></h3><h4 id="ratelimit" tabindex="-1"><code>ratelimit</code> <a class="header-anchor" href="#ratelimit" aria-label="Permalink to &quot;`ratelimit`&quot;">​</a></h4><ul><li><strong>描述</strong>：固定窗口计数限速器，控制单位时间请求频率。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_ratelimit_check()</code>：检查是否超过速率限制。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/ratelimit.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/ratelimit.c" target="_blank" rel="noreferrer">src/ratelimit.c</a></li></ul><h4 id="tokenbucket" tabindex="-1"><code>tokenbucket</code> <a class="header-anchor" href="#tokenbucket" aria-label="Permalink to &quot;`tokenbucket`&quot;">​</a></h4><ul><li><strong>描述</strong>：令牌桶限速器，支持突发流量。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_tokenbucket_consume()</code>：消耗令牌。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/tokenbucket.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/tokenbucket.c" target="_blank" rel="noreferrer">src/tokenbucket.c</a></li></ul><hr><h3 id="cache" tabindex="-1"><strong>Cache</strong> <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;**Cache**&quot;">​</a></h3><h4 id="lfu" tabindex="-1"><code>lfu</code> <a class="header-anchor" href="#lfu" aria-label="Permalink to &quot;`lfu`&quot;">​</a></h4><ul><li><strong>描述</strong>：最少使用缓存淘汰策略。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_cache_lfu_create()</code>：创建 LFU 缓存。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/cache/lfu.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/cache/lfu.c" target="_blank" rel="noreferrer">src/cache/lfu.c</a></li></ul><h4 id="lru" tabindex="-1"><code>lru</code> <a class="header-anchor" href="#lru" aria-label="Permalink to &quot;`lru`&quot;">​</a></h4><ul><li><strong>描述</strong>：最近最少使用缓存淘汰策略。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_cache_lru_create()</code>：创建 LRU 缓存。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/cache/lru.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/cache/lru.c" target="_blank" rel="noreferrer">src/cache/lru.c</a></li></ul><hr><h3 id="textsearch" tabindex="-1"><strong>Textsearch</strong> <a class="header-anchor" href="#textsearch" aria-label="Permalink to &quot;**Textsearch**&quot;">​</a></h3><h4 id="bm" tabindex="-1"><code>bm</code> <a class="header-anchor" href="#bm" aria-label="Permalink to &quot;`bm`&quot;">​</a></h4><ul><li><strong>描述</strong>：Boyer-Moore 高效字符串搜索算法。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_textsearch_bm_prepare()</code>：准备 BM 模式表。</li><li><code>bfdev_textsearch_bm_search()</code>：执行 BM 搜索。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/textsearch/bm.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/textsearch/bm.c" target="_blank" rel="noreferrer">src/textsearch/bm.c</a></li></ul><h4 id="kmp" tabindex="-1"><code>kmp</code> <a class="header-anchor" href="#kmp" aria-label="Permalink to &quot;`kmp`&quot;">​</a></h4><ul><li><strong>描述</strong>：Knuth-Morris-Pratt 字符串匹配算法。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_textsearch_kmp_prepare()</code>：预处理模式串。</li><li><code>bfdev_textsearch_kmp_search()</code>：执行 KMP 匹配。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/textsearch/kmp.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/textsearch/kmp.c" target="_blank" rel="noreferrer">src/textsearch/kmp.c</a></li></ul><h4 id="sunday" tabindex="-1"><code>sunday</code> <a class="header-anchor" href="#sunday" aria-label="Permalink to &quot;`sunday`&quot;">​</a></h4><ul><li><strong>描述</strong>：Sunday 快速字符串查找算法。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_textsearch_sunday_prepare()</code>：构建跳转表。</li><li><code>bfdev_textsearch_sunday_search()</code>：执行 Sunday 查找。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/textsearch/sunday.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/textsearch/sunday.c" target="_blank" rel="noreferrer">src/textsearch/sunday.c</a></li></ul><hr><h3 id="miscellaneous" tabindex="-1"><strong>Miscellaneous</strong> <a class="header-anchor" href="#miscellaneous" aria-label="Permalink to &quot;**Miscellaneous**&quot;">​</a></h3><h4 id="guards" tabindex="-1"><code>guards</code> <a class="header-anchor" href="#guards" aria-label="Permalink to &quot;`guards`&quot;">​</a></h4><ul><li><strong>描述</strong>：变量自动清理机制，在作用域退出时自动释放资源。</li><li><strong>主要函数</strong>： <ul><li><code>bfdev_cleanup()</code>：注册清理回调。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/guards.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/guards.c" target="_blank" rel="noreferrer">src/guards.c</a></li></ul><h4 id="notifier" tabindex="-1"><code>notifier</code> <a class="header-anchor" href="#notifier" aria-label="Permalink to &quot;`notifier`&quot;">​</a></h4><ul><li><strong>描述</strong>：通知链机制，用于事件订阅与广播。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/notifier.h#L85-L86" target="_blank" rel="noreferrer">bfdev_notifier_register()</a>：注册通知回调。</li><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/notifier.h#L76-L78" target="_blank" rel="noreferrer">bfdev_notifier_call()</a>：触发所有注册回调。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/notifier.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/notifier.c" target="_blank" rel="noreferrer">src/notifier.c</a></li></ul><h4 id="once" tabindex="-1"><code>once</code> <a class="header-anchor" href="#once" aria-label="Permalink to &quot;`once`&quot;">​</a></h4><ul><li><strong>描述</strong>：确保代码段只执行一次，常用于初始化逻辑。</li><li><strong>主要函数</strong>： <ul><li><a href="https://github.com/openbfdev/bfdev/blob/master/include/bfdev/once.h#L34-L36" target="_blank" rel="noreferrer">BFDEV_DO_ONCE()</a>：宏定义确保单次执行。</li></ul></li><li><strong>头文件</strong>：<code>&lt;bfdev/once.h&gt;</code></li><li><strong>源文件</strong>：<a href="https://github.com/openbfdev/bfdev/blob/master/src/once.c" target="_blank" rel="noreferrer">src/once.c</a></li></ul>',107),i=[a];function n(s,c,d,b,h,g){return r(),t("div",null,i)}const m=e(o,[["render",n]]);export{u as __pageData,m as default};
