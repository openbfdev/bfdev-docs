import{_ as i,o as a,c as e,Q as l}from"./chunks/framework.4298ed76.js";const g=JSON.parse('{"title":"Supporting Components","description":"","frontmatter":{},"headers":[],"relativePath":"manual/en_US/components.md","filePath":"manual/en_US/components.md"}'),t={name:"manual/en_US/components.md"},r=l('<h1 id="supporting-components" tabindex="-1">Supporting Components <a class="header-anchor" href="#supporting-components" aria-label="Permalink to &quot;Supporting Components&quot;">​</a></h1><h2 id="data-container" tabindex="-1">Data Container <a class="header-anchor" href="#data-container" aria-label="Permalink to &quot;Data Container&quot;">​</a></h2><ul><li>array: Dynamic array, also with stack APIs</li><li>bloom: Bloom filter</li><li>btree: B+ tree</li><li>circle: Circular queue</li><li>fifo: First in first out (single read/write needn&#39;t lock)</li><li>hashmap: Hash map with burst rehash</li><li>hashtbl: Hash table tools</li><li>heap: Binary heap tree</li><li>hlist: Hash linked list</li><li>ilist: Index linked list</li><li>list: Double linked list</li><li>llist: Lock free linked list</li><li>radix: Radix tree</li><li>rbtree: Red black tree</li><li>ringbuf: Ring buffer</li><li>segtree: Segment tree</li><li>skiplist: Skip list</li><li>slist: Single linked list</li></ul><h2 id="algorithms" tabindex="-1">Algorithms <a class="header-anchor" href="#algorithms" aria-label="Permalink to &quot;Algorithms&quot;">​</a></h2><ul><li>arc4: RC4 stream cipher</li><li>ascii85: Ascii85 binary-to-text encoding</li><li>base32: Base32 binary-to-text encoding</li><li>base64: Base64 binary-to-text encoding</li><li>bsearch: Array binary search</li><li>crc: Cyclic redundancy check</li><li>hash: Golden ratio hash</li><li>md5: MD5 message-digest algorithm</li><li>prandom: Pseudo random generator</li><li>sha1: Secure hash algorithm 1</li><li>sha2: Secure hash algorithm 2 (sha224 / sha256)</li><li>stringhash: String hash functions</li></ul><h2 id="bit-operation" tabindex="-1">Bit Operation <a class="header-anchor" href="#bit-operation" aria-label="Permalink to &quot;Bit Operation&quot;">​</a></h2><ul><li>bcd: Binary-coded-decimal encoding</li><li>bitfield: Bit padding functions</li><li>bitmap: Bitmap operations</li><li>bitops: Bit operations</li><li>bitrev: Bitwise reversal</li><li>bitwalk: Bitmap iterator</li><li>popcount: Bitwise statistics</li></ul><h2 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h2><ul><li>atomic: Atomic operation functions</li><li>byteorder: Byte order exchange</li><li>cmpxchg: Atomic compare and exchange</li><li>overflow: Saturation operations</li><li>swab: Byte exchange functions</li><li>unaligned: Non-aligned access functions</li></ul><h2 id="memory-allocator" tabindex="-1">Memory Allocator <a class="header-anchor" href="#memory-allocator" aria-label="Permalink to &quot;Memory Allocator&quot;">​</a></h2><ul><li>allocator: Allocation compatibility layer</li><li>allocpool: Mempool optimized for allocation performance</li><li>memalloc: Memory allocator algorithm</li></ul><h2 id="string-process" tabindex="-1">String Process <a class="header-anchor" href="#string-process" aria-label="Permalink to &quot;String Process&quot;">​</a></h2><ul><li>argv: Argv segmentation</li><li>fsm: Finite state machine</li><li>levenshtein: Levenshtein edit distance</li><li>scnprintf: Safe snprintf in buffer</li></ul><h2 id="mathematics" tabindex="-1">Mathematics <a class="header-anchor" href="#mathematics" aria-label="Permalink to &quot;Mathematics&quot;">​</a></h2><ul><li>align: Alignment functions</li><li>dword: Double word calculate</li><li>log2: Log2 calculate</li><li>math: Mathematical methods</li><li>minmax: Maximum and minimum value</li><li>uplower: High and low bytes</li><li>mpi: Multi precision integer</li></ul><h2 id="rate-limiting" tabindex="-1">Rate limiting <a class="header-anchor" href="#rate-limiting" aria-label="Permalink to &quot;Rate limiting&quot;">​</a></h2><ul><li>ratelimit: Fixed Window Counter Rate Limiter</li><li>tokenbucket: Token Bucket Rate Limiter</li></ul><h2 id="cache" tabindex="-1">Cache <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;Cache&quot;">​</a></h2><ul><li>lfu: Least-frequently-used cache</li><li>lru: Least-recently-used cache</li></ul><h2 id="textsearch" tabindex="-1">Textsearch <a class="header-anchor" href="#textsearch" aria-label="Permalink to &quot;Textsearch&quot;">​</a></h2><ul><li>bm: Boyer–Moore string-search algorithm</li><li>kmp: Knuth–Morris–Pratt string-search algorithm</li><li>sunday：Sunday string-search algorithm</li></ul><h2 id="miscellaneous" tabindex="-1">Miscellaneous <a class="header-anchor" href="#miscellaneous" aria-label="Permalink to &quot;Miscellaneous&quot;">​</a></h2><ul><li>action: Callback function framework</li><li>callback: Dummy callbacks</li><li>guards: Clear variable when goes out of scope</li><li>log: Log framework</li><li>notifier: Notifier chain</li><li>once: Do once functions</li></ul>',23),o=[r];function n(s,c,h,m,u,d){return a(),e("div",null,o)}const b=i(t,[["render",n]]);export{g as __pageData,b as default};
