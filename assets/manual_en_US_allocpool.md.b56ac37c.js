import{_ as s,o as l,c as a,Q as o}from"./chunks/framework.4298ed76.js";const b=JSON.parse('{"title":"Allocpool","description":"","frontmatter":{},"headers":[],"relativePath":"manual/en_US/allocpool.md","filePath":"manual/en_US/allocpool.md"}'),n={name:"manual/en_US/allocpool.md"},p=o(`<h1 id="allocpool" tabindex="-1">Allocpool <a class="header-anchor" href="#allocpool" aria-label="Permalink to &quot;Allocpool&quot;">â€‹</a></h1><p>In bfdev allocpool is a mempool optimized for allocation, the struct is defined as follows:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> bfdev_allocpool {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">block;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> size;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">uintptr_t</span><span style="color:#E1E4E8;"> last;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> count;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> bfdev_allocpool {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">block;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> size;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">uintptr_t</span><span style="color:#24292E;"> last;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> count;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>The memory of the allocpool are available in the <code>block</code> field. The <code>last</code> field holds the current offset of memory. The <code>count</code> field holds the number of allocation.</p><p>Use the <code>BFDEV_DEFINE_ALLOCPOOL(name, memory, size)</code> macro to define an allocpool, and the <code>bfdev_allocpool_init(allocpool, memory, size)</code> call to initialize an allocpool object that has already been allocated.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* define an int allocpool named foo using static array */</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">block</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">4096</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#B392F0;">BFDEV_DEFINE_ALLOCPOOL</span><span style="color:#E1E4E8;">(foo, block, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(block));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* initialize int allocpool named bar using malloc */</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> bfdev_allocpool </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">bar;</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">block;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">block </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4096</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">bar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bfdev_allocpool_init</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">bar</span><span style="color:#E1E4E8;">, block, </span><span style="color:#79B8FF;">4096</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* define an int allocpool named foo using static array */</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">block</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">4096</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6F42C1;">BFDEV_DEFINE_ALLOCPOOL</span><span style="color:#24292E;">(foo, block, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(block));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* initialize int allocpool named bar using malloc */</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> bfdev_allocpool </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">bar;</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">block;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">block </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4096</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">bar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bfdev_allocpool_init</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">bar</span><span style="color:#24292E;">, block, </span><span style="color:#005CC5;">4096</span><span style="color:#24292E;">);</span></span></code></pre></div><p>Use the following functions to alloc and free in an allocpool:</p><ul><li>bfdev_allocpool_alloc(allocpool, size, align) allocate an aligned memory block</li><li>bfdev_allocpool_free(allocpool, block) release any block of memory</li></ul><p>The space occupied by the allocation pool grows linearly, free function will only release a reference count, when the count reaches zero, the space will be released uniformly.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">foo;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">foo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bfdev_allocpool_alloc</span><span style="color:#E1E4E8;">(allocpool, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">bfdev_allocpool_free</span><span style="color:#E1E4E8;">(allocpool, foo);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">foo;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bfdev_allocpool_alloc</span><span style="color:#24292E;">(allocpool, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">bfdev_allocpool_free</span><span style="color:#24292E;">(allocpool, foo);</span></span></code></pre></div>`,10),e=[p];function c(t,r,i,E,y,d){return l(),a("div",null,e)}const f=s(n,[["render",c]]);export{b as __pageData,f as default};
