import{_ as e,o as s,c as a,Q as n}from"./chunks/framework.7f588f2d.js";const m=JSON.parse('{"title":"Building bfdev from Sources","description":"","frontmatter":{},"headers":[],"relativePath":"manual/en_US/configure.md","filePath":"manual/en_US/configure.md"}'),l={name:"manual/en_US/configure.md"},p=n(`<h1 id="building-bfdev-from-sources" tabindex="-1">Building bfdev from Sources <a class="header-anchor" href="#building-bfdev-from-sources" aria-label="Permalink to &quot;Building bfdev from Sources&quot;">â€‹</a></h1><p>The project built based on cmake, the build is configured using the configure command. It defines various aspects of the system, including the methods bfdev is allowed to use for connection processing. At the end it creates a Makefile.</p><p>The configure command supports the following parameters:</p><ul><li><p>BFDEV_DEVEL</p><p>the default developer option template enhances the compiler&#39;s error checking capabilities and may reduce performance, which automatically turns on the following options:</p><ul><li>BFDEV_EXAMPLES</li><li>BFDEV_ASAN</li><li>BFDEV_UBSAN</li></ul></li><li><p>BFDEV_EXAMPLES</p><p>compile built-in development and test cases, which may help you understand bfdev&#39;s capabilities and performance.</p></li><li><p>BFDEV_STRICT</p><p>convert all warnings into errors (enabled by default).</p></li><li><p>BFDEV_ASAN</p><p>enable address sanitizer.</p></li><li><p>BFDEV_UBSAN</p><p>enable undefined behaviour Sanitizer.</p></li><li><p>BFDEV_DBGLIST</p><p>enable dynamic monitoring of list data (enabled by default).</p></li><li><p>BFDEV_DBGSLIST</p><p>enable dynamic monitoring of single list structure (enabled by default).</p></li><li><p>BFDEV_DBGHLIST</p><p>enable dynamic monitoring of hash list structure (enabled by default).</p></li><li><p>BFDEV_DBGILIST</p><p>enable dynamic monitoring of index list structure (enabled by default).</p></li><li><p>BFDEV_DBGRBTREE</p><p>enable dynamic monitoring of RB-tree structure (enabled by default).</p></li><li><p>BFDEV_DBGHEAP</p><p>enable dynamic monitoring of heap structure (enabled by default).</p></li><li><p>BFDEV_DBGREFCNT</p><p>enable dynamic monitoring of reference count (enabled by default).</p></li></ul><p>Example of parameters usage (all of this needs to be typed in one line):</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cmake</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Bbuild</span></span>
<span class="line"><span style="color:#E1E4E8;">    -DBFDEV_DEVEL</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">ON</span></span>
<span class="line"><span style="color:#E1E4E8;">    -DBFDEV_DBGLIST</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">OFF</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cmake</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Bbuild</span></span>
<span class="line"><span style="color:#24292E;">    -DBFDEV_DEVEL</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">ON</span></span>
<span class="line"><span style="color:#24292E;">    -DBFDEV_DBGLIST</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">OFF</span></span></code></pre></div><p>After configuration, bfdev is compiled and installed using make:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span></span>
<span class="line"><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">nproc</span><span style="color:#9ECBFF;">)</span></span>
<span class="line"><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span></span>
<span class="line"><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">nproc</span><span style="color:#032F62;">)</span></span>
<span class="line"><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span></code></pre></div>`,8),o=[p];function t(i,c,r,d,u,E){return s(),a("div",null,o)}const f=e(l,[["render",t]]);export{m as __pageData,f as default};
